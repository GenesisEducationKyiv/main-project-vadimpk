// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CryptoAPI is an autogenerated mock type for the CryptoAPI type
type CryptoAPI struct {
	mock.Mock
}

// GetRate provides a mock function with given fields: ctx, fromCurrency, toCurrency
func (_m *CryptoAPI) GetRate(ctx context.Context, fromCurrency string, toCurrency string) (float64, error) {
	ret := _m.Called(ctx, fromCurrency, toCurrency)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (float64, error)); ok {
		return rf(ctx, fromCurrency, toCurrency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, fromCurrency, toCurrency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, fromCurrency, toCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCryptoAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewCryptoAPI creates a new instance of CryptoAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCryptoAPI(t mockConstructorTestingTNewCryptoAPI) *CryptoAPI {
	mock := &CryptoAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
